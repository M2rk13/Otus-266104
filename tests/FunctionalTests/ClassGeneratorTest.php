<?php

declare(strict_types=1);

namespace App\Tests\FunctionalTests;

use App\Maintenance\AutoCodeGenerator\AutoGenerateClass;
use App\Maintenance\Ioc\IoC;
use App\Reposition\Coordinates;
use App\Reposition\MovableInterface;
use App\Reposition\VelocityChangeableInterface;
use PHPUnit\Framework\TestCase;

class ClassGeneratorTest extends TestCase
{
    public function testCreateAutoGeneratedClass(): void
    {
        $classGenerator = new AutoGenerateClass(MovableInterface::class);
        $classBody = $classGenerator->getGeneratedClassBody();
        eval($classBody);

        $coordinates = new Coordinates();
        $ioC = new IoC();
        $adapterClass = 'AutoGeneratedMovableInterface';
        $adapter = new $adapterClass($coordinates, $ioC);

        $this->assertInstanceOf($adapterClass, $adapter);
    }

    public function testAutoGenerateMovableAdapter(): void
    {
        $prefixClass = 'AutoGeneratedTest';
        $ioC = new IoC();

        $classBodyGeneratorFunc = function ($class) use ($prefixClass) {
            return (new AutoGenerateClass($class, $prefixClass))->getGeneratedClassBody();
        };

        $ioC->resolve(IoC::IOC_REGISTER, 'MovableAdapter', $classBodyGeneratorFunc);

        $adapterPhpCode = $ioC->resolve('MovableAdapter', MovableInterface::class);
        eval($adapterPhpCode);

        $coordinates = new Coordinates();
        $adapterClass = $prefixClass . 'MovableInterface';
        $adapter = new $adapterClass($coordinates, $ioC);

        $this->assertInstanceOf($adapterClass, $adapter);
    }

    public function testAutoGenerateFromChildInterface(): void
    {
        $classGenerator = new AutoGenerateClass(VelocityChangeableInterface::class);
        $classBody = $classGenerator->getGeneratedClassBody();
        eval($classBody);

        $coordinates = new Coordinates();
        $ioC = new IoC();
        $adapterClass = 'AutoGeneratedVelocityChangeableInterface';
        $adapter = new $adapterClass($coordinates, $ioC);

        $this->assertInstanceOf($adapterClass, $adapter);
    }
}
